#!/bin/bash
set -e


PORT=
VOLUME=
ENV=
IMAGE=
HOST_NAME=
CONT_NAME=
IP_ADDR=
[ -f "docker-run.conf" ] && DOCKER_RUN_CONF="docker-run.conf"
RUN_COMMAND=
RUNTMP_COMMAND=
ATTACH_COMMAND=


DOQUER_LOCK_FILE=/var/lib/doquer/doquer_containers

# Capture grep exit code
#  0 match string
#  1 not match string
islocked() {
	grep -q $1 $DOQUER_LOCK_FILE
	return $?
}

# 0 exist
# n not exist or error
isexistcontainer() {
	docker inspect "$1" 1>/dev/null
	return $?
}

isuntaggedimage() {
	docker images | grep '<none>' |grep $1 1>/dev/null
	return $?
}

removefromlist() {
	# Delete match pattern /pattern/d
	sed -i "/$1/d" $DOQUER_LOCK_FILE
}

set_docker_vars() {

	local tmp_arg=$( mktemp )

	if [[ -d "$1" ]]; then
		#is a directory
		DOCKER_RUN_CONF=$(dirname ${1})/$DOCKER_RUN_CONF
		shift
	elif [[ -f "$1" ]]; then
		#is a file
		DOCKER_RUN_CONF="$1"
		shift
	fi
	[ -f "$DOCKER_RUN_CONF" ] && source $DOCKER_RUN_CONF
	echo "${*:1}" > $tmp_arg && source $tmp_arg
}

isrootuser(){
	if ! [ $(id -u) = 0 ]; then
		echo "This script must be run as root" 1>&2
		exit 1
	fi
}


help_lock() {
	echo "Usage: doquer lock CONTAINER"
	echo
	echo "Lock container, add to locked list, one by one"
	echo
}

help_unlock() {
	echo "Usage: doquer unlock CONTAINER"
	echo
	echo "Unlock container, remove from locked list"
	echo
}

help_rmall() {
	echo "Usage: doquer rmall"
	echo
	echo "Remove all unlocked container´s"
	echo
	echo "	-f Force remove running containers"
	echo
}

help_rmiall() {
	echo "Usage: doquer rmiall"
	echo
	echo "Remove all untagged <none> image"
	echo
}

help_integrity() {
	echo "Usage: doquer integrity"
	echo
	echo "Check integrity of locked list"
	echo
}

help_show() {
	echo "Usage: doquer show [OPTIONS]"
	echo
	echo "Show locked container´s"
	echo
	echo "	-q Only display numeric IDs"
	echo
}

help_build() {
	echo "Usage: doquer build [path|args...]"
	echo
	echo "Build a container from a configuration file"
	echo
}

help_run() {
	echo "Usage: doquer run [OPTIONS] [path|args...]"
	echo
	echo "Run a background container from a configuration file"
	echo
	echo "	--pipe Use pipework for running container"
	echo
	echo "	 Ex: doquer run docker-run-test.conf ENV='"-e PASSWORD=root"' PORT='"-p 8008:80"'"
	echo
}

help_runtmp() {
	echo "Usage: doquer runtmp [path|args...]"
	echo
	echo "Run a temporal container from a configuration file"
	echo
	echo "	--pipe Use pipework for running container"
	echo
}

help_conf() {
	echo "Usage: doquer conf [path|args...]"
	echo
	echo "Get configuration file"
	echo
	echo "	Ex: doquer conf /home/test/samba"
	echo
}

help_attach() {
	echo "Usage: doquer attach CONTAINER [COMMAND]"
	echo
	echo "Attach to a running container and run command"
	echo
}


case "$1" in
	lock)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_lock
			exit 1
		fi
		[ isexistcontainer "$2" ] || exit 1
		[ islocked "$2" ] && { 
			echo "$2 -- already locked."
			exit 1
		}
		echo "$2" >> $DOQUER_LOCK_FILE
		;;
	unlock)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_unlock
			exit 1
		fi
		if islocked "$2"; then
			removefromlist "$2"
		else
			echo "$2  -- isn´t on locked list."
		  	exit 1
		fi
		;;
	rmall)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_rmall
			exit 1
		fi
		if [ "$2" == "-f" ]; then
			docker stop $( docker ps -q | grep -v -f $DOQUER_LOCK_FILE )
		fi
		docker rm $( docker ps -a -q | grep -v -f $DOQUER_LOCK_FILE )
		;;
	rmiall)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_rmiall
			exit 1
		fi
		allimages=$( docker images -q )
		for cont in $allimages
		do
			if isuntaggedimage  ${cont}; then
				docker rmi ${cont}
			fi
		done
		;;
	integrity)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_integrity
			exit 1
		fi
		contexclude=$( cat $DOQUER_LOCK_FILE )
		for cont in $contexclude
		do
			if ! isexistcontainer ${cont}; then
				removefromlist 
			fi
		done
		;;
	show)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_show
			exit 1
		fi
		if [ "$2" == "-q" ]; then
			cat $DOQUER_LOCK_FILE
		else
			# grep -e PATTERN and -f FILE Pattern
			docker ps -a | grep -e "IMAGE" -f $DOQUER_LOCK_FILE
		fi
		;;
	build)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_build
			exit 1
		fi
		set_docker_vars "${*:2}"
		docker_image_dir=$(dirname ${DOCKER_RUN_CONF})
		[ -d "$docker_image_dir/usr" ] && chmod 755 $docker_image_dir/usr/*
		docker build \
			-rm \
			-t $IMAGE \
			$docker_image_dir
		;;
	run)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_run
			exit 1
		fi
		if [ "$2" == "--pipe" ] ; then
			isrootuser
			ENV="$ENV -e BRIDGED=1"
			PORT=
			pipeflag=1
			shift
		fi
		set_docker_vars "${*:2}"
		contid=$(docker run \
			-d \
			$ENV \
			$HOST_NAME \
			$PORT \
			$VOLUME \
			$CONT_NAME \
			$IMAGE \
			$RUN_COMMAND)
		[ $pipeflag ] && pipework br0 $contid $IP_ADDR/24
		echo  $contid
		;;
	runtmp)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_runtmp
			exit 1
		fi
		if [ "$2" == "--pipe" ] ; then
			isrootuser
			ENV="$ENV -e BRIDGED=1"
			PORT=
			pipeflag=1
			shift
		fi
		set_docker_vars "${*:2}"
		docker run \
			-rm -t -i \
			$ENV \
			$HOST_NAME \
			$PORT \
			$VOLUME \
			$CONT_NAME \
			$IMAGE \
			$RUNTMP_COMMAND
	#	[ $pipeflag ] && pipework br0 $contid $IP_ADDR/24
		;;
	conf)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_conf
			exit 1
		fi
		set_docker_vars "${*:2}"
		echo "PORT=$PORT"
		echo "VOLUME=$VOLUME"
		echo "ENV=$ENV"
		echo "IMAGE=$IMAGE"
		echo "HOST_NAME=$HOST_NAME"
		echo "CONT_NAME=$CONT_NAME"
		echo "IP_ADDR=$IP_ADDR"
		echo "DOCKER_RUN_CONF=$DOCKER_RUN_CONF"
		echo "RUN_COMMAND=$RUN_COMMAND"
		echo "RUNTMP_COMMAND=$RUNTMP_COMMAND"
		echo "ATTACH_COMMAND=$ATTACH_COMMAND"
		;;
	attach)
		if [ "$2" == "-h" ] || [ "$2" == "--help" ] ; then
			help_attach
			exit 1
		fi
		isrootuser
		contid=$2
		shift
		set_docker_vars "${*:2}"
		lxc-attach -n $contid $ATTACH_COMMAND
		;;
	version)
		echo "VERSION 0.2 __ bySabi"
		;;
	*)
		echo "Usage: doquer COMMAND [arg...]"
		echo 
		echo "Easy live with docker ..."
		echo
		echo "Commands:"
		echo "	lock		Lock container, prevent deletion"
		echo "	unlock		Unlock container"
		echo "	rmall		Remove all unlock container´s"
		echo "	rmiall		Remove all untagged <none> image"
		echo "	integrity	Check integrity, remove not exist container"
		echo "	show		Show lock container´s"
		echo "	build		Build a container from a configuration file"
		echo "	run		Run a background container from a configuration file"
		echo "	runtmp		Run a temporal container from a configuration file"
		echo "	conf		Get configuration file"
		echo "	attach		Attach to a running container"
		echo "	version		Display version"
		echo
		exit 1
		;;
esac

exit 0
